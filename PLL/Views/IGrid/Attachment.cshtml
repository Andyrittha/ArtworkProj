<div class="cls_igrid_upload" style="padding-top:10px;">
    <input type="hidden" class="cls_hid_igrid_taskform_id" />
    <input type="hidden" class="cls_hid_igrid_taskform_nodeid" />
    <form class="cls_form_att_for_style cls_form_igrid_upload" method="POST" enctype="multipart/form-data">
        <div class="dropzone">
            <div class="row fileupload-buttonbar">
                <div class="col-lg-12">
                    <!-- The fileinput-button span is used to style the file input field as button -->
                    <span class="btn btn-success fileinput-button">
                        <!-- <i class="glyphicon glyphicon-plus"></i> -->
                        <span>Add files...</span>
                        <!--<input type="file" name="files[]" multiple>-->
                        <input type="file" name="files[]" id="fileinput" onclick="clickFiles()" onchange="return checkFiles(event)" accept="" multiple>
                    </span>
                    <button type="submit" class="btn btn-primary start cls_hide">
                        <!-- <i class="glyphicon glyphicon-upload"></i> -->
                        <span>Start upload</span>
                    </button>
                    <button type="reset" class="btn btn-danger cancel cls_hide">
                        <!-- <i class="glyphicon glyphicon-ban-circle"></i> -->
                        <span>Cancel upload</span>
                    </button>
                </div>
            </div>
            <!-- The table listing the files available for upload/download -->
            <div class="cls_div_table_igrid">
                <table role="presentation" class="cls_table_igrid_upload_file table table-striped">
                    <thead>
                        <tr>
                            <th class="cls_nowrap"></th>
                            <th class="cls_nowrap">File name</th>
                            <th class="cls_nowrap">File size</th>
                            <th class="cls_nowrap">Uploaded by</th>
                            <th class="cls_nowrap">Action</th>


                        </tr>
                    </thead>
                    <tbody class="files"></tbody>
                </table>
            </div>
        </div>
    </form>
</div>
<!-- The template to display files available for upload -->
<script id="template-upload" type="text/x-tmpl">
    {% for (var i=0, file; file=o.files[i]; i++) { %}
    <tr class="template-upload fade">
        <td>
            @*<span class="preview"></span>*@
        </td>
        <td>
            <p class="name">{%=file.name%}</p>
            <strong class="error text-danger"></strong>
        </td>
        <td>
            <p class="size">Processing...</p>
            <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"><div class="progress-bar progress-bar-success" style="width:0%;"></div></div>
        </td>
        <td></td>
        <td>
            {% if (!i && !o.options.autoUpload) { %}
            <button class="btn btn-primary start " disabled>
                <i class="glyphicon glyphicon-upload"></i>
                <span>Start</span>
            </button>
            {% } %}
            {% if (!i) { %}
            <button class="btn btn-warning cancel">
                <i class="glyphicon glyphicon-ban-circle"></i>
                <span>Cancel</span>
            </button>
            {% } %}
        </td>
    </tr>
    {% } %}
</script>
<!-- The template to display files available for download -->
<script id="template-download" type="text/x-tmpl">
    {% for (var i=0, file; file=o.files[i]; i++) {
    $('.cls_hid_artwork_request_form_nodeid').val(file.nodeid);
    %}
    <tr data-node-id="{%=file.nodeid%}" class="template-download fade">
        <td>
            <span class="preview">
                {% if (file.thumbnailUrl) { %}
                <img src="{%=file.thumbnailUrl%}">
                {% } %}
            </span>
        </td>
        <td>
            <p class="name">
                {% if (file.url) { %}
                <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}" {%=file.thumbnailUrl?'data-gallery':''%}>{%=file.name%}</a>
                {% } else { %}
                <span>{%=file.name%}</span>
                {% } %}
            </p>
            {% if (file.error) { %}
            <div><span class="label label-danger">Error</span> {%=file.error%}</div>
            {% } %}
        </td>
        <td>
            {% if (!file.error) { %}
            <span class="size">{%=o.formatFileSize(file.size)%}</span>
            {% } %}
        </td>
        <td>{%=file.create_by_display_txt%}<br /> </td>
        <td style="width:170px;">
            {% if (file.canDelete) { %}
            <a href="@Url.Action("Download_IGrid","FileUpload")?tblfils_id={%=file.NODE_ID_TXT%}" class="cls_hand" target="_blank">Download</a><br />
            <a data-node-id="{%=file.nodeid%}" style="color:#d9534f;" class="cls_hand cls_delete_file">Delete</a>
            {% } else { %}
            <button class="btn btn-warning cancel">
                <i class="glyphicon glyphicon-ban-circle"></i>
                <span>Cancel</span>
            </button>
            {% } %}
        </td>
    </tr>
    {% } %}
</script>

<script type="text/javascript">
    function clickFiles() {
        var FileTypeAllowed_Values = '';
        var FileTypeAllowed = '@System.Configuration.ConfigurationManager.AppSettings["FileTypeNotAllowed"]';
        var ExtensionsList = FileTypeAllowed.split(';');

        for (var i = 0; i < ExtensionsList.length; i++) {
            FileTypeAllowed_Values += ExtensionsList[i] + ',';
        }
        FileTypeAllowed_Values = FileTypeAllowed_Values.substring(0, FileTypeAllowed_Values.length - 1);
        $('#fileinput').attr('accept', FileTypeAllowed_Values);
    }

    function checkFiles(event) {
        let fileList = event.target.files;
        var FileTypeNotAllowed = '@System.Configuration.ConfigurationManager.AppSettings["FileTypeNotAllowed"]';
        var ExtensionsList = FileTypeNotAllowed.split(';');

        var fileCount = 0;
        fileCount = fileList.length;
        var b = false;
        var filesName = '';

        if (fileCount == 1) {

            let file = fileList[0];
            let extension = file.name.match(/(?<=\.)\w+$/g)[0].toLowerCase();

            var ext2 = "." + extension.toLowerCase();
            filesName = file.name;
            if (ExtensionsList.includes(ext2)) {
                b = true;
            }
        }
        else {
            b = true;
            for (var i = 0; i < fileList.length; i++) {

                let file = fileList[i];
                let extension = file.name.match(/(?<=\.)\w+$/g)[0].toLowerCase();

                var ext2 = "." + extension.toLowerCase();

                if (!ExtensionsList.includes(ext2)) {
                    b = false;
                    filesName += file.name + ' \r\n ';
                }
            }
        }

        if (b == false) {
            alert('Invalid file type \r\n' + filesName);
            event.target.value = '';
            fileInput.value = '';
            return false;
        }
    }

</script>